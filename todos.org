#+TITLE: rewrite-cljs spike notes

* Changes
** Breaking
*** min clojure version 1.9, min java version 8 (testing against openjdk 8 & 11)
*** min clojurescript version 10, testing with latest
*** moved internal code into impl namespace
*** positional support for ClojureScript version - migrated to Clojure implementation
*** performance for ClojureScript version - generally favoured Clojure implementation
*** now using ex-info for exceptions for portability
** Accretive
*** Clojure version gains features that were only in ClojureScript version
*** Forgotten insert-space-left insert-space-right insert-newline-left insert-newline-right exposed on zip api
** Neutral
*** Docs now generated by cljdocs
*** API docs for direct zipper functions now display correct arguments
*** Switched to using clojure.tools.reader.edn
* Differences
** No file support for ClojureScript version

* Todos
** TODO move dev only source to separate dev folder
** TODO experiment with preserving namespaces
    Although I already moved source under impl namespace, experiment with preserving
    old namespaces for both clojure and clojurescript. It might be awkward but probably better
    than breaking clients.
** TODO reconsider source layout
    I created clj, cljc and cljs layout, but this is probably not worth it. The brunt of my code is cljc so
    I will likely revert to simple src and test layout.
** TODO look into @sogaui notes on find-last-by-pos
   in the cljc-spike-2 branch of the aforementioned repository, given:

   ```(require '[rewrite-clj.zip :as rz])

   (def a-form "(defn hi-fn\n  [x]\n  (+ x 1))")```

   why is it that:

   ```(-> a-form (rz/of-string {:track-position? true}) (rz/find-last-by-pos [2 4]) rz/string)
   (-> a-form (rz/of-string {:track-position? true}) (rz/find-last-by-pos [2 5]) rz/string)```

   both return "x"?

   also i noticed that:

   ```(-> a-form (rz/of-string {:track-position? true}) (rz/find-last-by-pos [1 14]) rz/string)```

   returns "\n" -- here 14 is a position beyond the end of the row in question.
   is this by design?

   fwiw, it appears that something similar to the "x" example case also occurs with the last element of (+ x 1):

   ```(-> a-form (rz/of-string {:track-position? true}) (rz/find-last-by-pos [3 8]) rz/string)
   (-> a-form (rz/of-string {:track-position? true}) (rz/find-last-by-pos [3 9]) rz/string)```

   here, both return "1".

** TODO make sure I am using the right reader
    - clojure.tools.reader
    - clojure.tools.reader.edn <- this one seems safest to me.
    - clojure.reader
    - clojure/reader-string
** TODO cleanup coerce record support
** TODO have a try with https://github.com/xsc/rewrite-clj/issues/76
** Testing
*** TODO can I verify that I have not broken the api?
*** TODO code coverage? Would be very good to know if coverage is weak in areas I have touched.
*** TODO review cljs specific tests
    - node_test.cljs
    - paredit_test.cljs - this is a cljs specific feature… will see if it fits into cli version as well
    - zip_tests.cljs
    Ran cloverage and it generated a good report but also failed many tests.  Not sure why.
** Docs & API
*** TODO update README to be at least in line with rewrite-clj - ideally improve it.
** Interop
*** TODO Object vs object String vs string
** Language differences from library perspective
*** TODO what happens when we try to parse a ratio from ClojureScript
*** TODO test handling a very large int in cljs
*** TODO experiment with sexprs across lang differences
*** TODO experiment with coerce across lang differences
*** TODO consider not using sepxr internally - I expect it will be an interop problemo
*** TODO regex - any issues?
** Performance
*** TODO are rundis' optimizations still valid today?
*** TODO research what others are doing for benchmarking… would like to know if I am making things slower.
** Deployment
*** TODO min clojurescript version - latest
*** TODO continuity on clojars for rundis deploys?
*** TODO make sure I understand deploy requirements for cljs - what goes into the jar?

* interop notes
  Differences between Clojure and ClojureScript
  - throws are bit different
  - catch Throwable
  - ns def must be verbose version
  - macros must be included differently
  - IMetaData and other base types different
  - format not part of cljs standard lib
  - no Character in cljs

* From rundis
   - http://rundis.github.io/blog/2015/clojurescript_performance_tuning.html
* Tool notes
** using figwheel main for testing
   Needs a dummy main to call if used only for testing
   Cannot use rebel readline for this project as rebel readline uses rewrite-clj and we get conflicts
