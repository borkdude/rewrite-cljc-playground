* rewrite-cljs notes

* Changes
** Breaking
*** moved internal code into internal namespace
*** positional support for ClojureScript version - favoured Clojure implementation
*** performance for ClojureScript version - generally favoured Clojure implementation
** Accretive
*** Clojure version gains
** Neutral
*** Docs now generated by cljdocs

* Differences
** No file support for ClojureScript version

* Todos
** DONE why are some namespaces renamed? findz editz removez seqz coercer… it almost seems like the author was trying to avoid namespace collisions.. but why the deviation? As these could be considered internal, I will lose the z.
** TODO bring cljs up to parity with clj version
** TODO add all rewrite-clj tests we possibly can
** TODO verify positional support
** TODO potemkin for macros... done in clj layer...
** TODO try to turn off deprecation warnings only for certain tests.
** TODO make sure I am using the right reader
    - clojure.tools.reader
    - clojure.tools.reader.edn
** Nodes
*** DONE add print support
*** TODO double check print support - I'm frankly not sure what it does
*** DONE uneval
*** DONE integer node
*** TODO understand promise work in fn node - currently commented out in cljs version
*** TODO why does cljs version have FnNode as coercable
** TODO add coerce record support
** Testing
*** TODO what to do for dev - currently trying out fighweel main
*** TODO what do do for ci - was using doo with karma and chrome headless
*** TODO need also to test for Clojure - can kaocha be used here?
*** TODO figure out what targets to test under for ClojureScript chrome-headless, node... ???
*** TODO can I verify that I have not broken the api?
*** TODO code coverage?
*** TODO review cljs specific tests
    - node_test.cljs
    - paredit_test.cljs - this is a cljs specific feature… will see if it fits into cli version as well
    - zip_tests.cljs
** Docs
*** TODO understand how cljdocs works - generate docs locally
*** TODO understand how potemkin affects docs
*** TODO verify internal code is not documented externally
*** TODO update README to be at least in line with rewrite-clj - ideally improve it.
** Interop
*** DONE abstract a format maybe call it simple-format
*** TODO make StringBuffer more similar for java and javascript … add clear to java version to match goog version.
*** TODO consider abstracting throws for interop
**** maybe switching to ex-info and ex-data would be sufficient?  This would likely mean extra support needed in tests but we could do that.
**** IndexOutOfBoundsException -> RangeError
**** consider abstracting catches for interop
**** weavejester had some generic support?
- [ ] figure out development testing story
- [ ] test with cljdoc locally
  - [ ] perserve ^:no-doc for all internal code
  - [ ] how does potemkin tie into docs?
- [ ] figure out ci testing story
  - [ ] targets
    - [ ] browsers
    - [ ] node?
  - [ ] tools
    - [ ] kaocha?
    - [ ] doo?
    - [ ] figwheel main?

- [ ] cli vs cljs
  - [ ] how does cljs deal with ratios clojure code?
  - [ ] experiment with sexpr, what does it mean to sexpr a cli specific feature in cljs?
- [ ]
- [ ] review internal usage of sexpr - avoid if possible, these are interop problems waiting to happen.
- [ ] test print support
- [ ] verify positional support

- [ ] can I do a potemkin like thing for macros?

- [ ] preserve type hints - how do I know if they are worthwhile?

- [ ] understand how docs happen after potemkin macros applied?!?
- [ ] figure out namespace handling - not even sure that clj version makes sense
- [ ] can I turn off deprecation warnings for a single file?
- [ ] turn on reflection warnings?
- [ ] are rundis’s optimizations still valid today?
- [ ] choose min clojure version - I think 1.9 is reasonable
- [ ] choose min jdk version - I think 8 is reasonable
- [ ] review cljs specific tests
  - node_test.cljs
  - paredit_test.cljs - this is a cljs specific feature… will see if it fits into cli version as well
  - zip_tests.cljs
- [ ] research what others are doing for benchmarking… would like to know if I am making things slower.
- [ ] can I verify that I have not broken the api?
- [ ] after all is working in cljs move to clic

- [ ] make sure I am using the right reader
  - [ ] clojure.tools.reader
  - [ ] clojure.tools.reader.edn

** Language differences from library perspective
*** TODO what happens when we try to parse a ratio from ClojureScript
*** TODO experiment with sexprs across lang differences
*** TODO experiment with coerce across lang differences
*** TODO consider not using sepxr internally - I expect it will be an interop problemo
*** TODO namespaced keywords and map - does it make sense for Clojure? How to work for ClojureScript
** Performance
*** TODO try to preserve hints - how do I know when they help - reflection warnings?
*** TODO only take clojurescript optimizations if the code is clear
*** TODO are rundis' optimizations still valid today?
*** TODO research what others are doing for benchmarking… would like to know if I am making things slower.
** TODO convert to cljc project
** Deployment
*** TODO min java version - 8
*** TODO min clojure version - 1.9
*** TODO min clojurescript version - latest
*** TODO continuity on clojars for rundis deploys


* interop notes
  Differences between Clojure and ClojureScript
  - throws are bit different
  - catch Throwable
  - ns def must be verbose version
  - macros must be included differently
  - IMetaData and other base types different
  - format not part of cljs standard lib
  - no Character in cljs

* From rundis
- http://rundis.github.io/blog/2015/clojurescript_performance_tuning.html

* Failures
- tried to test with figwheel main - but the problem, I think, is that rebel redline uses rewrite-clj and rewrite-cljs so I get collisions…
