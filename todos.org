#+TITLE: rewrite-cljs spike notes

* Changes
** Breaking
*** min clojure version 1.9, min java version 8 (testing against openjdk 8 & 11)
*** min clojurescript version 10, testing with latest
*** positional support for ClojureScript version - migrated to Clojure implementation
*** performance for ClojureScript version - generally favoured Clojure implementation
*** now using ex-info for exceptions for portability
** Accretive
*** Clojure version gains features that were only in ClojureScript version
*** Forgotten insert-space-left insert-space-right insert-newline-left insert-newline-right exposed on zip api
** Of Note
*** ClojureScript Namespace clash resolution
    ClojureScript picked up an implementation detail of Google Closure with regards to namespaces. In short, some namespaces
    that are legal in Clojure can be illegal for ClojureScript due to Google Closure namespace clashes. When porting rewrite-clj
    to cljs, the original author of rewrite-cljs resolved namespace clashes by renaming affected namespaces:
    - rewrite-clj.node.coerce -> rewrite-clj.node.coercer
    - rewrite-clj.node.string -> rewrite-clj.node.stringz
    - rewrite-clj.zip.edit -> rewrite-clj.zip.editz
    - rewrite-clj.zip.find -> rewrite-clj.zip.findz
    - rewrite-clj.zip.remove -> rewrite-clj.zip.removez
    - rewrite-clj.zip.seq -> rewrite-clj.zip.seqz

    In porting this work to a cljc project, I got the strong sense that all of the above were considered internal by the original
    author of rewrite-clj. At first I created an impl namespace and moved what seemed internal under impl.

    Then I had a look at how folks are using rewrite-clj namespaces. Many people, for whatever reasons,
    are using the internal undocumented namespaces. For this reason, to avoid breaking clients, I abandoned my impl namespace
    strategy and preserved not only the public documented api but also the internal undocumented namespaces for both clj and cljs.
    Actually clj clients will also pick up, but likely not use, the cljs namespaces above.

    I will adjust the documentation to make clear what is considered a public api.
** Neutral
*** Docs now generated by cljdocs
*** API docs for direct zipper functions now display correct arguments
*** API docs for `import-var`ed protocol functions now point to correct source code
*** Switched to using clojure.tools.reader.edn
*** Continuous integration is handled by CircleCI.
*** Changed testing tools
    For clj: using koacha
    For cljs: using fighwheel main for dev and testing with doo chrome headless and doo node for ci.

* Differences
** No file support for ClojureScript version

* Todos
** TODO refine cljs namespace alias lookup
    Allow a client to provide a resolver fn rather than just a data binding.  The default will be clojure tools reader *ns-alias* but
    should be over-rideable to whatever the client wants.
** TODO consider a util namespace?
    Plunk potemkin and interop under there?
** TODO make sure I am using the right reader
    - clojure.tools.reader
    - clojure.tools.reader.edn <- this one seems safest to me.
    - clojure.reader
    - clojure/reader-string
** TODO cleanup coerce record support
** TODO do I need rewrite-clj.node/coerce?
** TODO have a try with https://github.com/xsc/rewrite-clj/issues/76
** Testing
*** TODO can I verify that I have not broken the api?
    Would like to automatically verify all is good for clj and cljs
*** TODO code coverage? Would be very good to know if coverage is weak in areas I have touched.
*** TODO review cljs specific tests
    - node_test.cljs
    - paredit_test.cljs - this is a cljs specific feature… will see if it fits into cli version as well
    - zip_tests.cljs
    Ran cloverage and it generated a good report but also failed many tests.  Not sure why.
** Docs & API
*** TODO update README to be at least in line with rewrite-clj - ideally improve it.
*** TODO make it clearer that edn reads clojure code
*** TODO got good feedback from @sogaui on confusion ^:no-doc.
    Explain in docs internal vs external apis and intention of generated docs.
** Interop
*** TODO Object vs object String vs string
** Language differences from library perspective
*** TODO what happens when we try to parse a ratio from ClojureScript
*** TODO test handling a very large int in cljs
*** TODO experiment with sexprs across lang differences
*** TODO experiment with coerce across lang differences
*** TODO consider not using sepxr internally - I expect it will be an interop problemo
*** TODO regex - any issues?
** Performance
*** TODO are rundis' optimizations still valid today?
*** TODO research what others are doing for benchmarking… would like to know if I am making things slower.
** Deployment
*** TODO figure out next version number
    rewrite-clj is currently 0.6.1
    rewrite-cljs is currently 0.4.4
    Historically rewrite-cljs was tracking rewrite-clj.
    My changes will be me slightly ahead of rewrite-clj. If I am presumptuous, I might try 0.6.2.
    I do want communicate this needs a good shake though, so 0.6.2-alpha1
    To consider:
    - kaocha style versioning 0.0-<commit count>
    - cljdoc style versioning 0.0.<commit count>-<short hash>
    I like cljdoc versioning, but it is probably too much of a departure from existing versioning, and I
    would have to think about how to convey alpha-ness in that scheme. 0.6.<commit count>-<short hash>-alpha1?
    I will attempt to discuss with @xsc before release.
*** TODO min clojurescript version - latest
*** TODO continuity on clojars for rundis deploys?
*** TODO make sure I understand deploy requirements for cljs - what goes into the jar?

* interop notes
  Differences between Clojure and ClojureScript
  - throws are bit different
  - catch Throwable
  - ns def must be verbose version
  - macros must be included differently
  - IMetaData and other base types different
  - format not part of cljs standard lib
  - no Character in cljs

* From rundis
   - http://rundis.github.io/blog/2015/clojurescript_performance_tuning.html
* Tool notes
** using figwheel main for testing
   Needs a dummy main to call if used only for testing
   Cannot use rebel readline for this project as rebel readline uses rewrite-clj and we get conflicts
