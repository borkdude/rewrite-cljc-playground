* rewrite-cljs notes

* Changes
** Breaking
*** moved internal code into internal namespace
*** positional support for ClojureScript version - favoured Clojure implementation
*** performance for ClojureScript version - generally favoured Clojure implementation
*** now using ex-info for exceptions for portability
** Accretive
*** Clojure version gains features that were only in ClojureScript version
*** Forgotten insert-space-left insert-space-right insert-newline-left insert-newline-right exposed on zip api
** Neutral
*** Docs now generated by cljdocs

* Differences
** No file support for ClojureScript version

* Todos
** DONE why are some namespaces renamed? findz editz removez seqz coercer… it almost seems like the author was trying to avoid namespace collisions.. but why the deviation? As these could be considered internal, I will lose the z.
** DONE add all rewrite-clj tests we possibly can
** TODO bring cljs up to parity with clj version
** TODO verify positional support
** TODO potemkin for macros... done in clj layer...
** TODO try to turn off deprecation warnings only for certain tests.
** TODO make sure I am using the right reader
    - clojure.tools.reader
    - clojure.tools.reader.edn
    - clojure.reader
    - clojure/reader-string
** TODO add coerce record support
** TODO convert to cljc project
** Nodes
*** DONE add print support
*** DONE uneval
*** DONE integer node
*** DONE understand promise work in fn node - currently commented out in cljs version
*** DONE why does cljs version have FnNode as coercable - don't know, removed to match clj version
*** TODO double check print support - I'm frankly not sure what it does
*** TODO look a differences between clj and cljs for regex
*** TODO keyword & seq - namespace support for cljs
** Testing
*** TODO what to do for dev - currently trying out fighweel main
*** TODO what do do for ci - was using doo with karma and chrome headless
*** TODO need also to test for Clojure - can kaocha be used here?
*** TODO figure out what targets to test under for ClojureScript chrome-headless, node... ???
*** TODO can I verify that I have not broken the api?
*** TODO code coverage?
*** TODO review cljs specific tests
    - node_test.cljs
    - paredit_test.cljs - this is a cljs specific feature… will see if it fits into cli version as well
    - zip_tests.cljs
** Docs
*** DONE understand how cljdocs works - generate docs locally
    CLOSED: [2019-03-26 Tue 12:35]
*** TODO understand how potemkin affects docs
*** TODO verify internal code is not documented externally
*** TODO decide if internal namespace is a good idea or not. Are custom-zippper/core and node/protocols considered public?
    Good some feedback.. impl is a more idiomatic namespace.  Also need to expose custom-zippper core and node protocols
*** TODO adjust defn-switchable so that args are preserved for documentation
*** TODO update README to be at least in line with rewrite-clj - ideally improve it.
** Interop
*** DONE abstract a format maybe call it simple-format
*** TODO deal with potemkin macros: import-vars defprotocol+
*** TODO deal with defbase
*** TODO make-printable is macro for clj and function for cljs might be easiest to do reader conditional directly in protocols
*** TODO Object vs object String vs string
*** TODO make StringBuffer more similar for java and javascript … add clear to java version to match goog version.
*** TODO consider abstracting throws for interop
**** maybe switching to ex-info and ex-data would be sufficient?  This would likely mean extra support needed in tests but we could do that.
**** IndexOutOfBoundsException -> RangeError
**** consider abstracting catches for interop
**** weavejester had some generic support?
** Language differences from library perspective
*** TODO what happens when we try to parse a ratio from ClojureScript
*** TODO test handling a very large int in cljs
*** TODO experiment with sexprs across lang differences
*** TODO experiment with coerce across lang differences
*** TODO consider not using sepxr internally - I expect it will be an interop problemo
*** TODO namespaced keywords and map - does it make sense for Clojure? How to work for ClojureScript
** Performance
*** TODO try to preserve hints - how do I know when they help - reflection warnings?
*** TODO is StringBuffer joining 2 strings really much faster than (str a b)? (ex. in parser.token)
*** TODO is #js indexOf that much faster than contains?
(defn boundary?
  [c]
  "Check whether a given char is a token boundary."
  (contains?
    #{\" \: \; \' \@ \^ \` \~
      \( \) \[ \] \{ \} \\ nil}
    c))

(defn boundary?
  "Check whether a given char is a token boundary."
  [c]
  (< -1 (.indexOf #js [\" \: \; \' \@ \^ \` \~
                       \( \) \[ \] \{ \} \\ nil] c)))
*** TODO only take clojurescript optimizations if the code is clear
*** TODO are rundis' optimizations still valid today?
*** TODO research what others are doing for benchmarking… would like to know if I am making things slower.
** Deployment
*** TODO min java version - 8
*** TODO min clojure version - 1.9
*** TODO min clojurescript version - latest
*** TODO continuity on clojars for rundis deploys


* interop notes
  Differences between Clojure and ClojureScript
  - throws are bit different
  - catch Throwable
  - ns def must be verbose version
  - macros must be included differently
  - IMetaData and other base types different
  - format not part of cljs standard lib
  - no Character in cljs

* From rundis
- http://rundis.github.io/blog/2015/clojurescript_performance_tuning.html

* Failures
- tried to test with figwheel main - but the problem, I think, is that rebel redline uses rewrite-clj and rewrite-cljs so I get collisions…
