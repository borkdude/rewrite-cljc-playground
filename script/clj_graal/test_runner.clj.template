;; template for graal test runner

;; clojure.test builds up what tests to run at runtime, this causes native-image to use  more
;; memory than is available on CircleCI, so here we pre-find our test vars to run and
;; explicitly list them

(ns clj-graal.test-runner
  (:gen-class)
  (:require [clojure.test :as t]
            #_@TEST_NSES_HERE))

(defn test-ns-vars [[ns-obj ns-vars]]
  (binding [t/*report-counters* (ref t/*initial-report-counters*)]
    (t/do-report {:type :begin-test-ns, :ns ns-obj})
    (t/test-vars ns-vars)
    (t/do-report {:type :end-test-ns, :ns ns-obj})
    @t/*report-counters*))

(defn run-test-vars
  ([& test-vars]
   (let [ns-vars (group-by (comp :ns meta) test-vars)
         summary (assoc (apply merge-with + (map test-ns-vars ns-vars))
                        :type :summary)]
     (t/do-report summary)
     summary)))

(defn -main [& _args]
  (println "clojure version" (clojure-version))
  (println "java version" (System/getProperty "java.version"))
  (println "running native?" (= "executable" (System/getProperty "org.graalvm.nativeimage.kind")))
  (let [summary (run-test-vars #_@TEST_VARS_HERE)]
    (if (t/successful? summary) 0 1)))
